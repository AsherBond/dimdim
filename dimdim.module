<?php
// $Id: dimdim.module,v 1.9 2010/03/24 14:06:49 univate Exp $
/** 
 * @file dimdim.module
 * This is a module for integrating dimdim with Drupal.
 */

/**
 * The status of a dimdim web meeting.
 */
define("DIMDIM_STATUS_QUEUED", 0);
define("DIMDIM_STATUS_STARTED", 1);
define("DIMDIM_STATUS_FINISHED", 2);

/**
 * Implementation of hook_perm().
 */
function dimdim_perm() {
  return array(
    'configure dimdim server',
    'create dimdim conferences',
    'edit dimdim conferences',
    'edit own dimdim conferences',
    'host dimdim conference');
}

/**
 * Implementation of hook_node_info().
 */
function dimdim_node_info() {
  return array(
    'dimdim' => array(
      'name' => t('Dimdim Conference'),
      'module' => 'dimdim',
      'description' => t("A dimdim conference event ."),
    )
  );
}

/**
 * Implementation of hook_access().
 */
function dimdim_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create dimdim conferences');
  }

  if ($op == 'update' || $op == 'delete') {
      if (user_access('edit dimdim conferences') || (user_access('edit own dimdim conferences') && $account->uid == $node->uid && $account->uid != 0)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function dimdim_menu() {
  $items = array();

  $items['admin/settings/dimdim'] = array(
    'title' => 'DimDim',
    'description' => 'Configure dimdim settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dimdim_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/dimdim/account'] = array(
    'title' => 'Go to DimDim Dashboard',
    'description' => 'Configure dimdim settings.',
    'page callback' => 'dimdim_goto_account',
    'access arguments' => array('administer site configuration'),
  );

  $items['dimdim/meeting/%node/join'] = array(
    'title' => 'Join Meeting',
    'page callback' => 'dimdim_meeting_join',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['dimdim/meeting/%node/start'] = array(
    'title' => 'Start Meeting',
    'page callback' => 'dimdim_meeting_start',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  $items['dimdim/js'] = array(
    'title' => 'ahah callback',
    'page callback' => 'dimdim_js_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  $items['node/%/dimdim/recording'] = array(
    'title' => t('Web Conference Recording'),
    'page callback' => 'dimdim_recording',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Load a page in a modal frame.
 */
function dimdim_js_page() {
  modalframe_child_js();

  $args = func_get_args();
  $path = implode('/', $args);

  menu_set_active_item($path);

  if ($router_item = menu_get_item($path)) {
    if ($router_item['access']) {
      if ($router_item['file']) {
        require_once($router_item['file']);
      }
      $return = call_user_func_array($router_item['page_callback'], $router_item['page_arguments']);
    }
  }
  // Menu status constants are integers; page content is a string.
  if (is_int($return)) {
    modalframe_close_dialog();
  }
  return $return;
}

/**
 *
 */
function dimdim_recording($nid) {
  $node = node_load($nid);
  return theme('dimdim_recording', $node);
}

/**
 *
 */
function theme_dimdim_recording($node) {
  $output = '<div class="dimdim-recording">';
  $output .= $node->recording;
  $output .= '</div>';
  return $output;
}

/**
 * Administer settings form.
 */
function dimdim_admin_settings() {
  $form['dimdim_account'] = array(
    '#value' => l('Go to dimdim account', 'admin/settings/dimdim/account'),
  );
  $form['dimdim_server_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Location of DimDim server.'),
    '#description' => t('Enter the hostname of the DimDim server.'),
    '#default_value' => variable_get('dimdim_server_location', 'http://my.dimdim.com'),
  );
  $form['dimdim_username'] = array(
    '#type' => 'textfield',
    '#title' => t('DimDim user name'),
    '#description' => t('User name of registered DimDim.'),
    '#default_value' => variable_get('dimdim_username',''),
  );
  $form['dimdim_password'] = array(
    '#type' => 'textfield',
    '#title' => t('DimDim password'),
    '#description' => t('Password of registered DimDim user.'),
    '#default_value' => variable_get('dimdim_password', ''),
  );
  $form['dimdim_return_url'] = array(
    '#type' => 'textfield',
    '#title' => t('DimDim default return URL'),
    '#description' => t('Default return URL that page returns to when a DimDim web conference concludes.'),
    '#default_value' => variable_get('dimdim_return_url', ''),
  );

  $form['features'] = array(
    '#type' => 'fieldset',
    '#title' => t('Conference features'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ); 
  $form['features']['dimdim_default_features'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Conference features'),
    '#default_value' => variable_get('dimdim_default_features', array()),
    '#options' => _dimdim_get_conference_features(),
  );
  $form['dimdim_adv_webinar'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable advanaced webinar features.'),
    '#description' => t('This is only avalible with certain paid Dimdim plans'),
    '#default_value' => variable_get('dimdim_adv_webinar', FALSE),
  );

  $form['dimdim_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log debug message to watchdog'),
    '#default_value' => variable_get('dimdim_debug', FALSE),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_form().
 */
function dimdim_form(&$node) {
  global $user;

  drupal_add_css(drupal_get_path('module', 'dimdim') .'/dimdim.css');
  $type = node_get_types('type', $node);

  if (variable_get('dimdim_debug', FALSE) && !empty($node->meeting_id) && user_access('configure dimdim server')) {
    $response = dimdim_query('prtl', 'get_schedule_details', array('request' => drupal_to_js(array('scheduleId' => $node->meeting_id))));
    
    $form['dimdim_conference'] = array(
      '#type' => 'fieldset',
      '#title' => t('Debug Information'),
      '#description' => t('The following information is returned directly from Dimdim by querying the meetingID.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -8,
    );
    foreach ($response->response as $field => $value) { 
      if (is_array($value)) {
        $rows = array();
        foreach ($value as $index => $item) {
          if (is_array($item)) {
            $item = print_r($item, TRUE);
          }
          $rows[] = array(
            'field' => $index,
            'value' => $item,
          );
        }
        $value = theme('table', array('', ''), $rows); 
      }
      $form['dimdim_conference'][$field] = array(
        '#type' => 'item',
        '#title' => $field,
        '#value' => $value,
      );
    }
  }

  $form['meeting_id'] = array(
    '#type' => 'hidden',
    '#value' => $node->meeting_id,
  );

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5,
    );
  }
  if ($type->has_body) {
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }
  $host = user_load($node->host);
  $form['host'] = array(
    '#type' => 'textfield',
    '#title' => t('Host/presenter name'),
    '#description' => t('Enter the username of the user to be the host of this conference event.'),
    '#required' => TRUE,
    '#weight' => -3,
    '#default_value' => $host->name,
    '#autocomplete_path' => 'user/autocomplete',
  );
  $form['duration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Conference duration'),
    '#weight' => -2,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $date = !empty($node->start_date) ? $node->start_date : time(); 
  $form['duration']['start_date'] = array(
    '#type' => 'date_popup',
    '#title' => t('Date'),
    '#description' => '',
    '#default_value' => format_date($date, 'custom', 'Y-m-d H:i:s'),
    '#date_format' => 'm/d/Y H:i',
    '#timezone' => $user->timezone_name,
    '#date_increment' => 5,
    '#date_year_range' => '-0:+3',
    '#required' => TRUE,
  );
  $form['duration']['timezone'] = array(
    '#type' => 'select',
    '#title' => t('Timezone'),
    '#description' => t('Select the timezone of this conference event.'),
    '#options' => _dimdim_timezones(),
    '#default_value' => $user->timezone_name,
    '#required' => TRUE,
  );
  $form['duration']['duration_hours'] = array(
    '#type' => 'select',
    '#title' => t('Hours'),
    '#default_value' => $node->duration_hours,
    '#options' => array(
      1 => '1',
      2 => '2',
      3 => '3',
      4 => '4',
      5 => '5',
      6 => '6',
      7 => '7',
      8 => '8',
      9 => '9',
      10 => '10',
      11 => '11',
      12 => '12',
    ),
    '#description' => t('Hours'),
    '#required' => TRUE,
  );
  $form['duration']['duration_minutes'] = array(
    '#type' => 'select',
    '#title' => t('Minutes'),
    '#default_value' => $node->duration_minutes,
    '#options' => array(
      0  => '00',
      15 => '15',
      30 => '30',
      45 => '45',
    ),
    '#description' => t('Minutes'),
    '#required' => TRUE,
  );
 
  $form['features'] = array(
    '#type' => 'fieldset',
    '#title' => t('Conference features'),
    '#weight' => -1,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ); 
  $form['features']['features'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Conference features'),
    '#default_value' => !empty($node->features) ? $node->features : variable_get('dimdim_default_features', array()),
    '#options' => _dimdim_get_conference_features(),
  );

  $form['recording'] = array(
    '#type' => 'textfield',
    '#title' => t('Conference recording'),
    '#description' => t('Embed code provided by dimdim for recording.'),
    '#default_value' => $node->recording,
    '#maxlength' => 1024
  );

  return $form;
}

/**
 * Implementation of hook_insert().
 */
function dimdim_insert(&$node) {
  $dimdim = new stdClass();
  $dimdim->nid = $node->nid;
  $dimdim->duration_hours = $node->duration_hours;
  $dimdim->duration_minutes = $node->duration_minutes;
  $dimdim->start_date = strtotime($node->start_date .' '. $node->timezone);
  $dimdim->host = db_result(db_query("SELECT uid FROM {users} WHERE name='%s'", $node->host));
  $dimdim->meeting_status = DIMDIM_STATUS_QUEUED;
  $dimdim->recording = $node->recording;
  $dimdim->features = array(
    // create passwords
    'attendeeKey' => md5(rand(0,100)),
  ) + $node->features;

  $user = user_load($dimdim->host);


  $data = array(
    'request' => array(
      'enterpriseName' => 'dimdim',
      'groupName' => 'all',
      'accountName' => variable_get('dimdim_username', ''),
      'roomName' => 'default',
      'startDate' => format_date($dimdim->start_date, 'custom', 'M j, Y'),
      'startHour' => format_date($dimdim->start_date, 'custom', 'g'),
      'startMinute' => intval(format_date($dimdim->start_date, 'custom', 'i')),
      'timeAMPM' => format_date($dimdim->start_date, 'custom', 'A'),
      'agenda' => $node->title,
      'meetingName' => $node->title,
      'displayName' => $node->host,
      'meetingRecurrance' => 'SINGLE_EVENT', // SINGLE_EVENT, DAILY, WEEKLY, MON_DATE
    ),
    'api' => '/api/prtl/create_schedule',
  );

  if (variable_get('dimdim_adv_webinar', FALSE)) {
    $data['request']['webinarReturnUrl'] = $data['request']['returnurl'];
    $data['request']['webinarMaxHours'] = $data['request']['hours'];
    $data['request']['webinarMaxminutes'] = $data['request']['minutes'];
  }

  foreach ($dimdim->features as $feature => $status) {
    if (in_array($feature, array('attendeeKey'))) {
      $data['request'][$feature] = $status;
    }
    else {
      $data['request'][$feature] = !empty($status) ? 'true' : 'false';
    }
  }

  if ($dimdim->start_date > time()) {
    $data['request'] = drupal_to_js($data['request']);
    $response = dimdim_query('prtl', 'create_schedule', $data);
    if ($response->result) {
      $dimdim->meeting_id = $response->response->scheduleId;
    }
    else {
      drupal_set_message(t('Unable to schedule Dimdim meeting.'), 'error');
    }
  }
  else {
    drupal_set_message(t('Date/time of web meeting is in the past.'));
  }

  drupal_write_record('dimdim', $dimdim);
}

/**
 * Implementation of hook_update().
 */
function dimdim_update(&$node) {
  global $user;

  // if this is a new node or we're adding a new revision,
  if ($node->revision || empty($node->meeting_id)) {
    dimdim_insert($node);
  }
  else {
    $dimdim = new stdClass();
    $dimdim->nid = $node->nid;
    $dimdim->duration_hours = $node->duration_hours;
    $dimdim->duration_minutes = $node->duration_minutes;
    $dimdim->start_date = strtotime($node->start_date .' '. $node->timezone);
    $dimdim->host = db_result(db_query("SELECT uid FROM {users} WHERE name='%s'", $node->host));
    $dimdim->meeting_status = DIMDIM_STATUS_QUEUED;
    $dimdim->recording = $node->recording;

    $dimdim->features = array(
      'meetingRecurrance' => 'SINGLE_EVENT', // SINGLE_EVENT, DAILY, WEEKLY, MON_DATE
    ) + $node->features;

    $data = array(
      'request' => array(
        'enterpriseName' => 'dimdim',
        'groupName' => 'all',
        'accountName' => variable_get('dimdim_username', ''),
        'roomName' => 'default',
        'startDate' => format_date($dimdim->start_date, 'custom', 'M j, Y'),
        'startHour' => format_date($dimdim->start_date, 'custom', 'g'),
        'startMinute' => intval(format_date($dimdim->start_date, 'custom', 'i')),
        'timeAMPM' => format_date($dimdim->start_date, 'custom', 'A'),
        'agenda' => $node->title,
        'meetingName' => $node->title,
        'displayName' => $node->host,
      ),
      'api' => '/api/prtl/edit_schedule',
    );

    if (variable_get('dimdim_adv_webinar', FALSE)) {
      $data['request']['webinarReturnUrl'] = $data['request']['returnurl'];
      $data['request']['webinarMaxHours'] = $data['request']['hours'];
      $data['request']['webinarMaxminutes'] = $data['request']['minutes'];
    }

    foreach ($dimdim->features as $feature => $status) {
      if (in_array($feature, array('attendeeKey'))) {
        $data['request'][$feature] = $status;
      }
      else {
        $data['request'][$feature] = !empty($status) ? 'true' : 'false';
      }
    }
    
    $data['request']['scheduleId'] = $node->meeting_id;

    if ($dimdim->start_date > time()) {
      $data['request'] = drupal_to_js($data['request']);
      $response = dimdim_query('prtl', 'edit_schedule', $data);
      if ($response->result) {
        $dimdim->meeting_id = $response->response->scheduleId;
      }
      else {
        drupal_set_message(t('Unable to update Dimdim meeting.'), 'error');
      }
    }
    else {
      drupal_set_message(t('Date/time of web meeting is in the past.'));
    }
    drupal_write_record('dimdim', $dimdim, array('nid'));
  }
}

/**
 * Implementation of hook_delete().
 */
function dimdim_delete(&$node) {
  db_query("DELETE FROM {dimdim} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_nodeapi().
 */
function dimdim_nodeapi(&$node, $op, $teaser, $page) {
  if ($node->type != 'dimdim') {
    return;
  }
         
  switch ($op) {
    case 'validate':
      $uid = db_result(db_query("SELECT uid FROM {users} WHERE name='%s'", $node->host));
      if (empty($uid)) {
        form_set_error('host', t('Host is not a member of the site.'));
      }
      else {
        $host = user_load($uid);
        if (!user_access('host dimdim conference', $host)) {
          // check users has permission to host meeting
          form_set_error('host', t('The member does not have permission to host a conference.'));
        }
      }
    case 'delete revision':
      break;
  }
}

/**
 * Implementation of hook_load().
 */
function dimdim_load($node) {
  $dimdim = db_fetch_object(db_query('SELECT * FROM {dimdim} WHERE nid = %d', $node->nid));
  $dimdim->features = unserialize($dimdim->features);
  return $dimdim;
}

/**
 * Implementation of hook_view().
 */
function dimdim_view($node, $teaser = FALSE, $page = FALSE) {
  _dimdim_modalframe();

  $node = node_prepare($node, $teaser);
  $node->content['dimdim_info'] = array(
    '#value' => theme('dimdim_meeting_info', $node),
    '#weight' => -1,
  );

  return $node;
}

/**
 * Implements hook_filter().
 */
function dimdim_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
  case 'list':
    return array(0 => t('Insert dimdim recording'));

  case 'description':
    return t('Insert link to dimdim recording, defined by its ID or URL name');

  case 'prepare':
    return $text;

  case 'no cache':
    return TRUE;

  case "process":
    return preg_replace_callback('/\[dimdim:([^\s\]]+)\]/', '_dimdim_embed_replacer', $text);

  }
}

/**
 * Implements hook_filter_tips();
 */
function dimdim_filter_tips($delta, $format, $long = false) {
  return t('[dimdim:123] - insert a dimdim recording link<br/>');
}

/**
 * Implements hook_views_api()
 */
function dimdim_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'dimdim') .'/views',
  );
} 

/**
 * Implementation of hook_theme().
 */
function dimdim_theme() {
  return array(
    'dimdim_meeting_info' => array(
      'arguments' => array('node'),
    ),
    'dimdim_recording' => array(
      'arguments' => array('node'),
    ),
  );
}

/**
 * A custom theme function.
 */
function theme_dimdim_meeting_info($node) {
  global $user;

  $presenter = user_load($node->host);

  $presenter_name = theme('username', $presenter);
  $date = format_date($node->start_date, 'custom', 'l, M j Y');
  $time = format_date($node->start_date, 'custom', 'g:ia');
  $timezone = $user->timezone_name;
  $recording_link = l('play', 'node/'. $node->nid .'/dimdim/recording', array('attributes' => array('class' => 'dimdim-recording-link')));

  $output = '<div class="dimdim_date_info">';
  $output .= '<strong>Host:</strong> ' . $presenter_name . '<br />';
  $output .= '<strong>Date:</strong> ' . $date . '<br />';
  $output .= '<strong>Time:</strong> ' . $time . '<br />';
  $output .= '<strong>Timezone:</strong> ' . $timezone . '<br />';
  if (!empty($node->recording)) {
    $output .= '<strong>Recording:</strong> ' . $recording_link .'<br />';
  }

  $end_date = strtotime('+'. $node->duration_hours .' hours '. $node->duration_minutes .' minutes', $node->start_date);
  if ($end_date > time()) {
    if (user_access('configure dimdim server') || $user->uid == $presenter->uid) {
      $output .= '<strong>Meeting ID:</strong> ' . $node->meeting_id . '<br />';

      if (false && dimdim_is_room_occupied() == TRUE) {
        $output .= '<strong>Session already started or room is already in use</strong><br />';
      }
      else {
        $output .= '<div class="dimdim-button">'. l('Start Meeting', 'dimdim/meeting/'. $node->nid .'/start') .'</div>';
      }
    }
    if (empty($user->uid)) {
      $destination = 'destination='. drupal_urlencode("node/$node->nid");
      $output .= t('<a href="@login">Login</a> or <a href="@register">register</a> to join the session', array('@login' => url('user/login', array('query' => $destination)), '@register' => url('user/register', array('query' => $destination))));
    }
    else if (time() > ($node->start_date - 18000)) { // 30min
      // @todo add some jquery/ajax magic so that the join button is disabled until 15-30min prior to the start of the conference
      $data = array(
        'meetingRoomName' => variable_get('dimdim_username', ''),
        'displayname' => $user->name,
      );
      $data['attendeeKey'] = $node->features['attendeeKey'];

      $output .= '<div class="dimdim-button">'. l('Join Meeting', 'dimdim/meeting/'. $node->nid .'/join') .'</div>';
    }
    else {
      $output .= '<div class="dimdim-button"><input type="button" value ="'. t('Join meeting') .'" disabled="disabled" /></div>';
      $output .= t('This session has not started. You will be able to join the conference up to 15min prior to start time above.');
    }
  }
  else {
    $output .= t('This event is now over.');
  }
  $output .= '</div>';
  return $output;
}

/******************************************************************************
 *
 *  Helper functions
 *
 ******************************************************************************/

/**
 *
 */
function dimdim_is_room_occupied() {
  static $occupied = NULL;

  if (!isset($occupied)) {
    $response = dimdim_process_request('IsMeetingRoomOccupied.action', array('roomName' => variable_get('dimdim_username', '')));
    $occupied = ($response->result['success'] != 'true');
  }
  return $occupied;
}

/**
 * Create the dimdim action url.
 */
function dimdim_url($action) {
  $dimdimserver = variable_get('dimdim_server_location', 'http://www1.dimdim.com');
  $dimdimport = variable_get('dimdim_server_location_port', '80');
  return $dimdimserver . ':' . $dimdimport . '/portal/'. $action;
}

/**
 * Process a dimdim action request.
 * 
 * @param $action
 *   The dimdim action string e.g. "ScheduledMeeting.action".
 * @param $data
 *   An associate array of the data to send with this action.
 * @return
 *   A structured array of the response.
 */
function dimdim_process_request($action, $data) {
  $url = _dimdim_build_query($action, $data, TRUE);
  $response = drupal_http_request($url, array(), 'GET');
  $response->result = _dimdim_json_decode($response->data);
  if (variable_get('dimdim_debug', FALSE)) {
    watchdog('dimdim', t('Request: @request<br/>Response: @response', array('@request' => $url, '@response' => print_r($response, TRUE))));
  }
  return $response;
}

/**
 * Builds the URL query to send to dimdim.
 */
function _dimdim_build_query($action, $data = array(), $json = TRUE) {
  $default_data = array(
    'name' => variable_get('dimdim_username', ''),
    'password' => variable_get('dimdim_password', ''),
  ) + $data;
  if ($json) {
    $default_data['response'] = 'json';
  }

  foreach ($default_data as $param => $value) {
    $request .= $param .'='. urlencode($value) ."&";
  }
  $url = dimdim_url($action);
  $url .= '?'. $request;
  return $url;
}

/**
 * Decode the json responses from dimdim.
 *
 * The standard PHP json decode function expects quotes around variable names
 * and no new line charators, both of which appear in the dimdim response json
 * message.
 *
 * @param $json
 *   A json string response from Dimdim.
 * @return
 *   Array of the decoded json string.
 */
function _dimdim_json_decode($json) {
  $json = trim($json);
  $json = preg_replace("/([a-zA-Z0-9_]+?):([\"|{|\[])/" , "\"$1\":$2", $json); // fix variable names
  $json = json_decode($json, TRUE);
  return $json;
}

/**
 * Creates a form with a single button and hidden elements.
 * 
 * @param $form_state
 * 
 * @param $action
 *   The dimdim action.
 * @param $value
 *   The value used on the button.
 * @param $data
 *   Array of hidden elements to include in the form.
 */
function dimdim_button(&$form_state, $action, $value, $data) {
  foreach($data as $name => $hidden_value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $hidden_value,
    );
  }
  $form['#action'] = dimdim_url($action);
  $form['submit'] = array('#type' => 'submit', '#value' => $value);
  return $form;
}

/**
 * List of the dimdim conference features.
 * 
 * These features all have a 'true/false' argument in the dimdim api.
 */
function _dimdim_get_conference_features() {
  $features = array(
    'waitingarea' => t('Show the waiting area be enabled.'),
    'displayDialInfo' => t('Display the phone dial information.'),
    'participantsList' => t('Show participants list in the conference.'),
    'featurePrivateChat' => t('Enable private chat feature on conference.'),
    'featurePublicChat' => t('Enable public chat feature on conference.'),
    'featurePublisher' => t('Enable desktop sharing.'),
    'assistantEnabled' => t('Indicates whether “Meeting Assistant” should be made visible or not.'),
    'assignMicOnJoin' => t('Assign Mic to attendees when Joining conference.'),
    'featureWhiteboard' => t('Enable the whiteboard feature.'),
    'featureDocShare' => t('Enable the documents share feature.'),
    'featureWebShare' => t('Enable the web share feature.'),
    'featureRecording' => t('Enable the recording feature.'),
    'allowAttendeeInvide' => t('Allow attendees to invite other paticipants to the meeting.'), 
    'handsFreeOnLoad' => t('Indicates if the Hands Free options has to be enabled on load.'),
    'sendEmailOnStart' => t('Send email on start'),
  );
  if (variable_get('dimdim_adv_webinar', FALSE)) {
    $features['webinar'] = t('Enable webinar meeting type');
    $features['webinarFeaturePrivateChat'] = t('[Webinar] Enable private chat feature on conference.');
    $features['webinarFeaturePublicChat'] = t('[Webinar] Enable public chat feature on conference.');
    $features['webinarFeaturePublisher'] = t('[Webinar] Enable desktop sharing.');
    $features['webinarFeatureWhiteboard'] = t('[Webinar] Enable the whiteboard feature.');
    $features['webinarFeatureDocShare'] = t('[Webinar] Enable the documents share feature.');
    $features['webinarFeatureWebShare'] = t('[Webinar] Enable the web share feature.');
    $features['webinarFeatureRecording'] = t('[Webinar] Enable the recording feature.');
    $features['webinarDisplayDialInfo'] = t('[Webinar] Display dial-in information.');
  }
  return $features;
}

/**
 * Attempt to load the modalframe module required javascript.
 */
function _dimdim_modalframe() {
  if (module_exists('modalframe')) {
    drupal_add_js(drupal_get_path('module', 'dimdim') .'/dimdim.js', 'module');
    modalframe_parent_js();
  }
}

/**
 * Function used to replace the [dimdim: ...] tags.
 */
function _dimdim_embed_replacer($matches) {
  if (is_numeric($matches[1])) {
    $nid = $matches[1];
  }
  else {
    $path = explode("/", drupal_get_normal_path(rtrim(ltrim($matches[1], "/"), "/")));
    if ($path && ($path[0] == 'node') && is_numeric($path[1])) {
      $nid = $path[1];
    }
    else {
      return "<em>". t("Can't find !s to include!", array("!s" => $matches[1])) ."</em>";
    }
  }
  
  $node = node_load($nid);
  if ($nid && node_access('view', $node) && !empty($node->recording)) {
    _dimdim_modalframe();
    $recording_link = l($node->title, 'node/'. $node->nid .'/dimdim/recording', array('attributes' => array('class' => 'dimdim-recording-link')));
    return '<div class="insert-dimdim-recording">' . $recording_link . '</div>';
  }
  return '';
}

/**
 *
 */
function dimdim_query($service, $method, $data, $auth_token = NULL) {
  // X-Dimdim-Auth-Token not required on login method.
  if (!isset($auth_token) && $method != 'login') {
    $auth_token = dimdim_auth();
    if ($auth_token == FALSE) {
      return FALSE;
    }
  }
  $p=http_build_query($data);
  $c = curl_init();
  curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($c, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($c, CURLOPT_URL, variable_get('dimdim_server_location', 'http://my.dimdim.com') .'/api/'. $service .'/'. $method); 
  curl_setopt($c, CURLOPT_COOKIEFILE, '/tmp/dimdim.txt');
  if (isset($auth_token)) {
    curl_setopt($c, CURLOPT_HTTPHEADER, array('X-Dimdim-Auth-Token:'. $auth_token)); 
  }
  curl_setopt($c, CURLOPT_POST, count($p)); 
  curl_setopt($c, CURLOPT_POSTFIELDS, $p);
  $content = curl_exec($c);
  curl_close($c);
  $response = json_decode($content);
  return $response;
}

/**
 *
 */
function dimdim_auth($reset = FALSE) {
  static $auth_token;
  if (!isset($auth_token) || $reset) {
    $data = array(
      'request' => drupal_to_js(array(
        'account' => variable_get('dimdim_username', ''),
        'password' => variable_get('dimdim_password', ''),
        'group' => 'all',
      )), //'{"account":"","password":"","group":"all"}',
      'api' => '/api/auth/login',
    );
    $response = dimdim_query('auth', 'login', $data);
    if ($response->result) {
      $auth_token = $response->response->authToken;
    }
    else {
      return FALSE;
    }
  }
  watchdog('dimdim', $auth_token);
  return $auth_token;
}

/**
 * Verify Dimdim Auth Token
 */
function dimdim_verify() {
  $auth_token = dimdim_auth();

  $data = array(
    'request' => drupal_to_js(array(
      'authToken' => $auth_token,
      'account' => variable_get('dimdim_username', ''),
      'password' => variable_get('dimdim_password', ''),
      'group' => 'all',
    )),
    'api' => '/api/auth/verify',
  );

  $response = dimdim_query('auth', 'verify', $data);
  return ($reponse->result && $response->response->verified);
}

/**
 *
 */
function dimdim_goto_account() {
  $auth_token = dimdim_auth();
  header('Location: '. variable_get('dimdim_server_location', 'http://my.dimdim.com') .'/redirect?authToken='. $auth_token .'&p=/dashboard/'. variable_get('dimdim_username', '') .'/');
  exit();
}

function dimdim_meeting_start($node) {
  $data = array(
    'request' => drupal_to_js(array(
      'enterpriseName' => 'dimdim',
      'groupName' => 'all',
      'accountName' => variable_get('dimdim_username', ''),
      'roomName' => 'default',
      'scheduleId' => $node->meeting_id,
      'meetingKey' => $node->features['attendeeKey'],
      'attendeeKey' => $node->features['attendeeKey'],
    )),
    'api' => '/api/prtl/start_scheduled_meeting',
  );
  $response = dimdim_query('prtl', 'start_scheduled_meeting', $data);
  if ($response->result) {
    $data = array(
      'request' => drupal_to_js($response->response),
      'api' => '/api/conf/start_meeting',
    );
    $response = dimdim_query('conf', 'start_meeting', $data);
    if ($response->result) {
      $auth_token = dimdim_auth();
      header('Location: '. variable_get('dimdim_server_location', 'http://my.dimdim.com') .'/console?authToken='. $auth_token);
      exit();
    }
  }
  return t('Error, unable to start meeting.');
}

function dimdim_meeting_join($node) {
  global $user;
  $data = array(
    'request' => drupal_to_js(array(
      'account' => variable_get('dimdim_username', ''),
      'groupName' => 'all',
      'roomName' => 'default',
      'displayName' => $user->name,
      'meetingKey' => $node->features['attendeeKey'],
      'attendeeKey' => $node->features['attendeeKey'],
    )),
    'api' => '/api/conf/join_meeting',
  );
  $response = dimdim_query('conf', 'join_meeting', $data);
  if ($response->result) {
    $url = variable_get('dimdim_server_location', 'http://my.dimdim.com') .'/console?';
    if (!empty($response->response->clientId)) {
      $url .= 'clientId='. $response->response->clientId .'&';
    }
    $url .= 'group=all&account='. variable_get('dimdim_username', '') .'&room=default';
    header('Location: '. $url);
    exit();
  }
  else {
    drupal_set_message($response->message .': '. $response->reason, 'error');
  }
  drupal_goto('node/'. $node->nid);
}

/**
 * TESTING
 */
function dimdim_schedule() {
  $data = array(
    'request' => drupal_to_js(array(
      'enterpriseName' => 'dimdim',
      'groupName' => 'all',
      'accountName' => variable_get('dimdim_username', ''),
      'roomName' => 'default',
      'startDate' => 'Mar 27, 2010',
      'startHour' => '12',
      'startMinute' => '30',
      'timeAMPM' => 'PM',
      'agenda' => 'test',
      'meetingName' => ''
    )),
    'api' => '/api/prtl/create_schedule',
  );
  $response = dimdim_query('prtl', 'create_schedule', $data);
  print_r($response);
}

/**
 * List of support timezones.
 */
function _dimdim_timezones() {
  return array(
    'Africa/Cairo' => 'Africa/Cairo',
    'Africa/Casablanca' => 'Africa/Casablanca',
    'Africa/Harare' => 'Africa/Harare',
    'Africa/Kinshasa' => 'Africa/Kinshasa',
    'Africa/Nairobi' => 'Africa/Nairobi',
    'America/Araguaina' => 'America/Araguaina',
    'America/Araguaina' => 'America/Araguaina',
    'America/Bogota' => 'America/Bogota',
    'America/Cancun' => 'America/Cancun',
    'America/Caracas' => 'America/Caracas',
    'America/Chihuahua' => 'America/Chihuahua',
    'America/Godthab' => 'America/Godthab',
    'America/Guatemala' => 'America/Guatemala',
    'America/Mexico_City' => 'America/Mexico_City',
    'America/Santiago' => 'America/Santiago',
    'America/St_Johns' => 'America/St_Johns',
    'America/Toronto' => 'America/Toronto',
    'Asia/Almaty' => 'Asia/Almaty',
    'Asia/Baghdad' => 'Asia/Baghdad',
    'Asia/Baku' => 'Asia/Baku',
    'Asia/Bangkok' => 'Asia/Bangkok',
    'Asia/Calcutta' => 'Asia/Calcutta',
    'Asia/Colombo' => 'Asia/Colombo',
    'Asia/Dhaka' => 'Asia/Dhaka',
    'Asia/Hong_Kong' => 'Asia/Hong_Kong',
    'Asia/Irkutsk' => 'Asia/Irkutsk',
    'Asia/Jerusalem' => 'Asia/Jerusalem',
    'Asia/Kabul' => 'Asia/Kabul',
    'Asia/Karachi' => 'Asia/Karachi',
    'Asia/Katmandu' => 'Asia/Katmandu',
    'Asia/Krasnoyarsk' => 'Asia/Krasnoyarsk',
    'Asia/Kuwait' => 'Asia/Kuwait',
    'Asia/Magadan' => 'Asia/Magadan',
    'Asia/Muscat' => 'Asia/Muscat',
    'Asia/Rangoon' => 'Asia/Rangoon',
    'Asia/Seoul' => 'Asia/Seoul',
    'Asia/Singapore' => 'Asia/Singapore',
    'Asia/Taipei' => 'Asia/Taipei',
    'Asia/Tehran' => 'Asia/Tehran',
    'Asia/Tokyo' => 'Asia/Tokyo',
    'Asia/Vladivostok' => 'Asia/Vladivostok',
    'Asia/Yakutsk' => 'Asia/Yakutsk',
    'AST' => 'AST',
    'Atlantic/Azores' => 'Atlantic/Azores',
    'Atlantic/Cape_Verde' => 'Atlantic/Cape_Verde',
    'Australia/Adelaide' => 'Australia/Adelaide',
    'Australia/Brisbane' => 'Australia/Brisbane',
    'Australia/Canberra' => 'Australia/Canberra',
    'Australia/Darwin' => 'Australia/Darwin',
    'Australia/Hobart' => 'Australia/Hobart',
    'Australia/Perth' => 'Australia/Perth',
    'Brazil/DeNoronha' => 'Brazil/DeNoronha',
    'Canada/Atlantic' => 'Canada/Atlantic',
    'Canada/Central' => 'Canada/Central',
    'Canada/Saskatchewan' => 'Canada/Saskatchewan',
    'Europe/Amsterdam' => 'Europe/Amsterdam',
    'Europe/Athens' => 'Europe/Athens',
    'Europe/Belgrade' => 'Europe/Belgrade',
    'Europe/Brussels' => 'Europe/Brussels',
    'Europe/Bucharest' => 'Europe/Bucharest',
    'Europe/Helsinki' => 'Europe/Helsinki',
    'Europe/London' => 'Europe/London',
    'Europe/Moscow' => 'Europe/Moscow',
    'Europe/Sarajevo' => 'Europe/Sarajevo',
    'HST' => 'HST',
    'Pacific/Auckland' => 'Pacific/Auckland',
    'Pacific/Fiji' => 'Pacific/Fiji',
    'Pacific/Guam' => 'Pacific/Guam',
    'Pacific/Kwajalein' => 'Pacific/Kwajalein',
    'Pacific/Midway' => 'Pacific/Midway',
    'Pacific/Tongatapu' => 'Pacific/Tongatapu',
    'US/Arizona' => 'US/Arizona',
    'US/East-Indiana',
    'US/Mountain' => 'US/Mountain',
    'US/Pacific-New' => 'US/Pacific-New',
  );
}
